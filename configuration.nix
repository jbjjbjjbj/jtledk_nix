# Edit this configuration file to define what should be installed on
# your system.  Help is available in the configuration.nix(5) man page
# and in the NixOS manual (accessible by running ‘nixos-help’).

{ config, pkgs, lib, ... }:

let
  domain = "jtle.dk";
  keys = [
	  "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDIBqsAl+I52csqiiQfoyiUA/uzMLeMmr1pLyw0PGquCqoOFZELK5eY9K1XlRZXdO7sMCB8bfnSnq2AY3BNpHM7/8W5U1nJdJVaCskv+OZteuFh8FaE6nx3KxBIS9wilMYpQyGsJttAuHe1U6wRMCr/v6L6YkylKL+9ulwJGu8B2BWVfuD4Pk4s8UK3RJNALu7Jb3VpyCZaEznrJ1QGG9GfknFINls4yZMO0gwrheBuNv4MzMhR8ZkTj9bxg4ZnG0Pzd9eNDxY+D39vrlPIG8QYksBqAKCV8A9nDSH1UfwFhUbz3Epbb6zPXj0oCGbvtljQ7grlTiaKTWt9f0NOTL6lCxe3OeCEJR8yHKz1M/g/sEfXUPbjMiRh+HxxszGHMOrwjMRPyTDMmaI+tQmozXhm9jYa8Bw4CXzyfyLLOATbDARjecYmMiF5xTFflHvX6Aie9JpHMPsu2TJ/i6xbvB6Ac4Vz5z2D6o3XgkPfi/wAPINUSBd11Ef4QQcqpCyjvBU= cardno:000609659751"
	  "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAINvYX/Xq18zY6VZMOlaUIqzWxmrOpoti4XNloUC5Z9e6 Generated By Termius"
  ];
  git_keys = [
	"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCtt0yINU9fK+Mhmf5E5rq+B+QSyioGWhQRJfHSG3F6Vbn6qW8Zetoj3gribUPNJl9qdEFjGO+sw52qWXUT7r7cl9U573cuPiBocPRZ/SBmYpm2xOVDmPF0ukJK/3qCvKlsngTv1NdFQwmh624dmwUv4T/yyutd4NcYbJJIshle2hkkhLxv+YtrxRD+1bAYljDw3jLBBYsugC9pe/gVRsXmR9IqxIO4MUnlDIXWY8/4Uo7POBVEWb/2gPNVoJceG+N/lQv369rGW//qIAgf7I9unaF/M+Pw/SytcGQQ10E39/WRglhB5tdAf1WcAEJTaJ8EDO89T83ks/5FiRScMsa4DZBlJVc2htAKIVH6LyyuxhuG6sa7bQnSvTnZ6CkuBkH2pLmU0cJv4RkI5MoJVir7Tc9Lfq6I45mwG/9qcNKLAACZFAT0xjfCLunKN1xLFg+grvO/u3X0+bbcOEsb50Oe+EdrNV4/MrkF+w5hXR0XOyjfgd8c39Xcqi7Evv2Lj4s= julian@guust2"
  ] ++ keys;
  noteman_db = "noteman_db";
  noteman_user = "noteman";
  noteman_config = {
    listen = "localhost:4563";
    db = "user=${noteman_user} host=/var/run/postgresql dbname=${noteman_db} sslmode=disable";
    tmpl = "${pkgs.noteman}/shared/noteman";
    data = "/srv/noteman/";
    root = "/noteman";
    max_upload = 500;
    max_pages = 5;
  };
  certs_fullchain = "/etc/letsencrypt/live/jtle.dk/fullchain.pem";
  certs_privkey = "/etc/letsencrypt/live/jtle.dk/privkey.pem";
  unstable = import <unstable> {};
  secrets = import ./secrets.nix;
in {
  imports =
    [ # Include the results of the hardware scan.
      ./hardware-configuration.nix
      ./myi2p.nix
    ];

  nixpkgs.overlays = [ (self: super:  {
    noteman = pkgs.buildGoModule rec {
      pname = "noteman";
      version = "1.0";

      vendorSha256 = "17hkrczzrk0h7yl6lvf47dyrinf9jcsrb6gdlvws7729m1xqx635";
    
      src = builtins.fetchGit {
	url = "/srv/git/noteman";
	ref = "master";
      };

      postInstall = ''
	mkdir -p $out/shared/noteman
	cp $src/root.template $out/shared/noteman/root.template
      '';
    };
  } ) ];

  # Use the GRUB 2 boot loader.
  boot.loader.grub.enable = true;
  boot.loader.grub.version = 2;
  # boot.loader.grub.efiSupport = true;
  # boot.loader.grub.efiInstallAsRemovable = true;
  # boot.loader.efi.efiSysMountPoint = "/boot/efi";
  # Define on which hard drive you want to install Grub.
  boot.loader.grub.device = "/dev/sda"; # or "nodev" for efi only

  networking.hostName = "guust2"; # Define your hostname.
  # networking.wireless.enable = true;  # Enables wireless support via wpa_supplicant.

  # Set your time zone.
  # time.timeZone = "Europe/Amsterdam";

  # The global useDHCP flag is deprecated, therefore explicitly set to false here.
  # Per-interface useDHCP will be mandatory in the future, so this generated config
  # replicates the default behaviour.
  networking = {
    useDHCP = false;
    interfaces.enp1s0 = {
      useDHCP = true;
      ipv6.addresses = [
	{ address = "2a01:4f8:1c1e:53e2::2"; prefixLength = 64; }
      ];
    };
    defaultGateway6 = {
      address = "fe80::1";
      interface = "enp1s0";
    };
  };

  # Configure network proxy if necessary
  # networking.proxy.default = "http://user:password@proxy:port/";
  # networking.proxy.noProxy = "127.0.0.1,localhost,internal.domain";

  # Select internationalisation properties.
  # i18n.defaultLocale = "en_US.UTF-8";
  # console = {
  #   font = "Lat2-Terminus16";
  #   keyMap = "us";
  # };

  # Enable the X11 windowing system.
  # services.xserver.enable = true;

  # Configure keymap in X11
  # services.xserver.layout = "us";
  # services.xserver.xkbOptions = "eurosign:e";

  # Enable CUPS to print documents.
  # services.printing.enable = true;

  # Enable sound.
  # sound.enable = true;
  # hardware.pulseaudio.enable = true;
  
  services.nginx = {
    enable = true;
    recommendedTlsSettings = true;
    recommendedGzipSettings = true;
    virtualHosts = {
      ${domain} = {
	sslCertificate = certs_fullchain;
	sslCertificateKey = certs_privkey;
	root = "/srv/web/main/";
	default = true;
	forceSSL = true;
	locations = {
	  "/walls/" = {
	    index = "index.html";
	    alias = "/srv/web/walls/build/";
	  };
	  "/noteman" = {
	    extraConfig = ''
	    auth_basic "Restricted Content";
	    auth_basic_user_file ${ pkgs.writeText "nginx_noteman_auth" secrets.noteman_htaccess };
	    client_max_body_size 20M;

	    rewrite ^/noteman/(.*) /$1 break;
	    proxy_set_header Host $host;
	    proxy_set_header X-Real-IP $remote_addr;
	    proxy_pass http://127.0.0.1:4563/;
	    '';
	  };
	  "/_matrix" = {
		  proxyPass = "http://[::1]:8008";
	  };
	  "= /.well-known/matrix/server".extraConfig = 
	    let
	      resp = { "m.server" = "${domain}:443"; };
	    in ''
	      add_header Content-Type application/json;
	      return 200 '${builtins.toJSON resp}';
	    '';
	  "= /.well-known/matrix/client".extraConfig =
	    let resp = {
		  "m.homeserver" = { "base_url" = "https://${domain}"; };
		  "m.identity_server" = { "base_url" = "https://vector.im"; };
		};
	    in ''
	      add_header Content-Type application/json;
	      add_header Access-Control-Allow-Origin *;
	      return 200 '${builtins.toJSON resp}';
	      '';
	};
      };
      "git.${domain}" = {
	sslCertificate = certs_fullchain;
	sslCertificateKey = certs_privkey;
	forceSSL = true;
	extraConfig = ''
	  root ${pkgs.cgit}/cgit;
	  try_files $uri @cgit;

	  location ~ ^/(jtle.png|ray.png) {
	    root ${ ./cgit_files };
	  }	
	  location @cgit {
		fastcgi_param       SCRIPT_FILENAME ${pkgs.cgit}/cgit/cgit.cgi;
		fastcgi_param       PATH_INFO       $uri;
		fastcgi_param       QUERY_STRING    $args;
		fastcgi_param       HTTP_HOST       $server_name;
		fastcgi_pass        unix:/run/fcgiwrap.sock;
	  }
	'';
      };
    };
  };

  services.fcgiwrap.enable = true;

  services.postgresql = {
    enable = true;
    ensureDatabases = [ "noteman_db" "matrix_synapse" ];
    ensureUsers = [
      {
	name = noteman_user;
	ensurePermissions = {
	  "DATABASE ${noteman_db}" = "ALL PRIVILEGES";
	};
      }
      {
	name = "matrix-synapse";
	ensurePermissions = {
	  "DATABASE matrix_synapse" = "ALL PRIVILEGES";
	};
      }
    ];
  };

  systemd.services = {
    noteman = {
      wantedBy = [ "multi-user.target" ];
      after = [ "network.target" "postgresql.service" ];
      description = "Notes manager";    
      enable = true;
      serviceConfig = {
	Type = "simple";
	User = noteman_user;
	WorkingDirectory = "/srv/noteman";
	ExecStart = "${pkgs.noteman}/bin/noteman -c ${pkgs.writeText "noteman_config.json" (builtins.toJSON noteman_config)}";
	Restart = "on-failure";
      };
    };
  };

  services.quassel = {
    enable = true;
    interfaces = [ "0.0.0.0" ];
    user = "quassel";
    dataDir = "/home/quassel/data";
  };

  services.myi2p = {
    enable = true;
    package = unstable.i2p;
  };

  services.matrix-synapse = {
    enable = true;
    server_name = domain;
    registration_shared_secret = secrets.matrix_reg_secret;
    enable_registration = false;
    database_name = "matrix_synapse";
    listeners = [
      {
	port = 8008;
	bind_address = "::1";
	type = "http";
	tls = false;
	x_forwarded = true;
	resources = [
	  {
            names = [ "client" "federation" ];
            compress = false;
          }
	];
      }
    ];
  };

  environment.etc = {
    cgitrc = {
      text = import ./cgitrc.nix { cgit = pkgs.cgit; gitDir = "/srv/git"; };
    };
  };

  # Enable touchpad support (enabled default in most desktopManager).
  # services.xserver.libinput.enable = true;

  # Define a user account. Don't forget to set a password with ‘passwd’.
  users.users = {
    julian = {
      isNormalUser = true;
      extraGroups = [ "wheel" "i2p" ]; # Enable ‘sudo’ for the user.
      openssh.authorizedKeys.keys = keys;
    };
    git = {
      isNormalUser = true;
      openssh.authorizedKeys.keys = git_keys;
      packages = with pkgs; [
	exiftool 
	(buildEnv {
	  name = "pythonenv";
	  paths = [ (python3.withPackages (
	    ps: with ps; [ jinja2 pillow pyyaml ]
	  ))];
	})
      ];
    };
    ${noteman_user} = {
      isNormalUser = true;
    };
    quassel = {
      isNormalUser = true;
      extraGroups = [ "nginx" ];
    };
  };

  # List packages installed in system profile. To search, run:
  # $ nix search wget
  environment.systemPackages = with pkgs; [
    vim # Do not forget to add an editor to edit configuration.nix! The Nano editor is also installed by default.
    wget
    git
    tmux
    noteman
    certbot
    htop
    kakoune
  ];

  # Some programs need SUID wrappers, can be configured further or are
  # started in user sessions.
  # programs.mtr.enable = true;
  # programs.gnupg.agent = {
  #   enable = true;
  #   enableSSHSupport = true;
  # };

  # List services that you want to enable:

  # Enable the OpenSSH daemon.
  services.openssh = {
    permitRootLogin = "no";
    passwordAuthentication = false;
    enable = true;
  };

  # Open ports in the firewall.
  # networking.firewall.allowedTCPPorts = [ ... ];
  # networking.firewall.allowedUDPPorts = [ ... ];
  # Or disable the firewall altogether.
  networking.firewall = {
    allowPing = true;
    allowedTCPPorts = [
      # yeah
      22 80 443 
      # Quassel
      4242
      # i2p
      28936
    ];
    allowedUDPPorts = [
      # i2p
      28936 123
    ];
    enable = true;
  };

  # This value determines the NixOS release from which the default
  # settings for stateful data, like file locations and database versions
  # on your system were taken. It‘s perfectly fine and recommended to leave
  # this value at the release version of the first install of this system.
  # Before changing this value read the documentation for this option
  # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
  system.stateVersion = "21.05"; # Did you read the comment?

}

